/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package employee.management.system.ui;

import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import employee.management.system.*;
import javax.swing.*;
import java.awt.*;


public class PayrollPanel extends JPanel {
    private JTextField employeeIdField;
    private JTextField salaryField;

    public PayrollPanel() {
        setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel employeeIdLabel = new JLabel("Employee ID:");
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(employeeIdLabel, gbc);

        employeeIdField = new JTextField(15);
        gbc.gridx = 1;
        gbc.gridy = 0;
        add(employeeIdField, gbc);

        JLabel salaryLabel = new JLabel("Salary:");
        gbc.gridx = 0;
        gbc.gridy = 1;
        add(salaryLabel, gbc);

        salaryField = new JTextField(15);
        gbc.gridx = 1;
        gbc.gridy = 1;
        add(salaryField, gbc);

        JButton processButton = new JButton("Process Payroll");
        processButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String employeeId = employeeIdField.getText();
                String salary = salaryField.getText();
                processPayroll(employeeId, salary);
            }
        });
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        add(processButton, gbc);
    }

    private void processPayroll(String employeeId, String salaryStr) {
    try {
        System.out.println("Processing payroll..."); // Debugging
        int empId = Integer.parseInt(employeeId); // Use employeeId instead of id
        double salary = Double.parseDouble(salaryStr);

        // Fetch employee details based on employee_id
        EmployeeDAO employeeDAO = new EmployeeDAO();
        Employee employee = employeeDAO.getEmployeeByEmployeeId(empId); // Use getEmployeeByEmployeeId method

        if (employee != null) {
            System.out.println("Employee found: " + employee.getName()); // Debugging
            employee.setBaseSalary(salary);
            
            // Handle the decorated employee and get the original employee type
            if (employee instanceof ProjectAssignmentDecorator) {
                ProjectAssignmentDecorator decorator = (ProjectAssignmentDecorator) employee;
                employee = decorator.getOriginalEmployee();
            }

            // Determine the appropriate payroll strategy
            PayrollStrategy strategy;
            if (employee instanceof FullTimeEmployee) {
                strategy = new FullTimePayrollStrategy();
            } else if (employee instanceof PartTimeEmployee) {
                strategy = new PartTimePayrollStrategy();
            } else if (employee instanceof Contractor) {
                strategy = new ContractorPayrollStrategy();
            } else {
                throw new IllegalArgumentException("Unknown employee type");
            }

            // Process payroll using the PayrollSystem singleton
            PayrollSystem payrollSystem = PayrollSystem.getInstance();
            double pay = payrollSystem.processPayroll(employee, strategy);
            
            // Add payroll data to the database 
            employeeDAO.addPayroll(empId, salary); // Use empId instead of id
            
            JOptionPane.showMessageDialog(this, "Processed Payroll: " + pay);
        } else {
            JOptionPane.showMessageDialog(this, "Employee not found.");
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid format. Please enter valid numbers.");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while processing payroll.");
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
